apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "nodejs.fullname" . }}
  labels:
    app: {{ template "nodejs.name" . }}
    chart: {{ template "nodejs.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "nodejs.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        prometheus.io/scrape: {{ .Values.prometheus.enabled | quote }}
        prometheus.io/port: {{ .Values.prometheus.port | default .Values.service.port | quote }}
        prometheus.io/path: {{ .Values.prometheus.path | quote }}
      labels:
        app: {{ template "nodejs.name" . }}
        release: {{ .Release.Name }}
    spec:
      volumes:
        {{- if .Values.cloudsql.enabled }}
        - name: cloudsql-instance-credentials
          secret:
            secretName: cloudsql-instance-credentials
        {{- end }}
        {{- range .Values.customVolumes }}
        - name: {{ .secretName }}
          secret:
            secretName: {{ .secretName }}
        {{- end }}

      containers:
        {{- if .Values.cloudsql.enabled }}
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.11
          command: ["/cloud_sql_proxy",
                    "-instances={{ required "cloudsql.instanceName is required" .Values.cloudsql.instanceName }}=tcp:3306",
                    "-credential_file=/secrets/cloudsql/credentials.json"]
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql
              readOnly: true
          resources:
{{ toYaml .Values.cloudsql.proxy.resources | indent 12 }}
        {{- end }}

        - name: {{ .Chart.Name }}
          image: "{{ required "image.repository is required" .Values.image.repository }}:{{ required "image.tag is required" .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}

          env:
            - name: NODE_ENV
              value: production
            - name: SERVICE_NAME
              value: {{ template "nodejs.fullname" . }}
            - name: SERVICE_PORT
              value: {{ .Values.service.port | quote }}

            {{- with .Values.cloudsql }}
            {{- if .enabled }}
            - name: {{ .credentials.usernameEnvName }}
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: username
            - name: {{ .credentials.passwordEnvName }}
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: password
            {{- end }}
            {{- end }}

            {{- with .Values.rabbitmq -}}
            {{- if .enabled }}
            - name: {{ .host.envName }}
              value: {{ .host.value }}
            - name: {{ .username.envName }}
              value: {{ .username.value }}
            - name: {{ .password.envName }}
              valueFrom:
                secretKeyRef:
                  name: rabbitmq
                  key: rabbitmq-password
            {{- end -}}
            {{- end }}

            {{- range .Values.customEnvs }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}

            {{- range .Values.customSecretEnvs }}
            - name: {{ .name }}
              valueFrom:
                secretKeyRef:
                  name: {{ .secretName }}
                  key: {{ .secretKey }}
            {{- end }}

          volumeMounts:
            {{- range .Values.customVolumes }}
            - name: {{ .secretName }}
              mountPath: {{ .mountPath }}
            {{- end }}

          ports:
            - name: http
              containerPort: {{ required "service.port is required" .Values.service.port }}
              protocol: TCP
            {{- if or (.Values.probes.port) (.Values.prometheus.port) }}
            - name: admin
              containerPort: {{ .Values.probes.port | default .Values.prometheus.port }}
              protocol: TCP
            {{- end }}

          {{- if .Values.probes.enabled }}
          livenessProbe:
            httpGet:
              path: /admin/healthcheck
              port: {{ if .Values.probes.port -}}
                      admin
                    {{- else -}}
                      http
                    {{- end }}
          readinessProbe:
            httpGet:
              path: /admin/healthcheck
              port: {{ if .Values.probes.port -}}
                      admin
                    {{- else -}}
                      http
                    {{- end }}
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
